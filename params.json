{"name":"Reskin","tagline":"Android换肤库","body":"## 使用方法\r\n####1. Application\r\n应用启动时初始化传入Context，在应用Application `onCreate()`里添加：\r\n```java\r\nSkinManager.init(this);\r\n```\r\n####2. Activity\r\n支持换肤功能的Activity需继承`BaseSkinActivity`。\r\n```java\r\npublic class MainActivity extends BaseSkinActivity {\r\n    ...\r\n}\r\n```\r\n####3. 手动add的系统View\r\n需要将View及其换肤关注属性添加到换肤管理。\r\n```java\r\n/** 动态添加系统View */\r\nLinearLayout linearLayout = (LinearLayout) findViewById(R.id.root);\r\nTextView tv = new TextView(this);\r\nint colorResId = R.color.textColor;\r\ntv.setTextColor(getResources().getColor(colorResId));\r\nlinearLayout.addView(tv);\r\n\r\n/** 动态添加系统View不走onCreateView,需要手动添加换肤关注属性 */\r\nList<DynamicViewAttribute> attrs = new ArrayList<>();\r\nattrs.add(new DynamicViewAttribute(\"textColor\", colorResId));\r\naddSkinView(tv, attrs);\r\n```\r\n####4. 自定义View\r\n- 自定义View继承`android.view.View`\r\n\r\n自定义View直接继承CustomSkinView，在`initSKinRes()`初始化属性值，在`reSkin()`更新属性值，并主动调用`invalidate()`更新View。\r\n```java\r\npublic class SkinnableView extends CustomSkinView {\r\n    private String mText;\r\n\r\n    public SkinnableView(Context context) {\r\n        super(context);\r\n    }\r\n\r\n    public SkinnableView(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n    }\r\n\r\n    public SkinnableView(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n    }\r\n\r\n    @Override\r\n    public void initSKinRes() {\r\n        /** 赋值:系统默认值 */\r\n        mText = getResources().getString(R.string.demo_text);\r\n\r\n        /** 若当前主题不是默认主题,需要更改属性值 */\r\n        if (SkinManager.getTheme() != SkinTheme.DEFAULT) {\r\n            try {\r\n                mText = getResources().getString(SkinManager.getTheme().getId(R.string.demo_text));\r\n            } catch (Resources.NotFoundException e) {\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onDraw(Canvas canvas) {\r\n        super.onDraw(canvas);\r\n        canvas.drawText(mText, ...);\r\n    }\r\n\r\n    @Override\r\n    public void reSkin(SkinTheme theme) {\r\n        /** 必须try catch资源找不到时的异常，异常可不处理 */\r\n        try {\r\n            mText = getResources().getString(theme.getId(R.string.demo_text));\r\n        } catch (Resources.NotFoundException e) {\r\n        }\r\n\r\n        /** 更改属性值后刷新View */\r\n        invalidate();\r\n    }\r\n}\r\n```\r\n- 自定义View继承其它View\r\n\r\n自定义View继承其它View，需要自行实现`ICustomSkinView`接口，实现`initSKinRes()`和`reSkin()`方法。在`onAttachedToWindow()`和`onDetachedFromWindow()`添加到换肤管理。\r\n```java\r\npublic class CustomLinearLayout extends LinearLayout implements ICustomSkinView {\r\n    private int mColor;\r\n\r\n    public CustomLinearLayout(Context context) {\r\n        super(context);\r\n        initSKinRes();\r\n    }\r\n\r\n    public CustomLinearLayout(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        initSKinRes();\r\n    }\r\n\r\n    public CustomLinearLayout(Context context, AttributeSet attrs, int defStyleAttr) {\r\n        super(context, attrs, defStyleAttr);\r\n        initSKinRes();\r\n    }\r\n\r\n    @Override\r\n    public void initSKinRes() {\r\n        mColor = getResources().getColor(R.color.textColor);\r\n        if (SkinManager.getTheme() != SkinTheme.DEFAULT) {\r\n            try {\r\n                mColor = SkinManager.getTheme().getColor(R.color.textColor);\r\n            } catch (Resources.NotFoundException e) {\r\n            }\r\n        }\r\n        setBackgroundColor(mColor);\r\n    }\r\n\r\n    @Override\r\n    public void reSkin(SkinTheme theme) {\r\n        try {\r\n            mColor = theme.getColor(R.color.textColor);\r\n        } catch (Resources.NotFoundException e) {\r\n        }\r\n        setBackgroundColor(mColor);\r\n    }\r\n\r\n    @Override\r\n    protected void onAttachedToWindow() {\r\n        super.onAttachedToWindow();\r\n        ((BaseSkinActivity) getContext()).addCustomView(this);\r\n    }\r\n\r\n    @Override\r\n    protected void onDetachedFromWindow() {\r\n        super.onDetachedFromWindow();\r\n        ((BaseSkinActivity) getContext()).removeCustomView(this);\r\n    }\r\n}\r\n```\r\n\r\n####5. 多Activity的换肤管理\r\n触发换肤的Activity主动设置全局当前换肤主题，并主动触发本Activity的换肤函数`reSkin()`。其它Activity的换肤会在`onResume()`自行完成，不需主动触发。\r\n```java\r\npublic void changeSkin() {\r\n    SkinManager.reSkin(targetTheme);\r\n    reSkin(targetTheme);\r\n}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}